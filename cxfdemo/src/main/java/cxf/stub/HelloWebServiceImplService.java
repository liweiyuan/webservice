package cxf.stub;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 2.7.0
 * 2015-12-30T15:57:35.774+08:00
 * Generated source version: 2.7.0
 */
@WebServiceClient(name = "HelloWebServiceImplService",
        wsdlLocation = "http://localhost:8080/cxfdemo/services/HelloWebService?wsdl",
        targetNamespace = "http://test.com/")
public class HelloWebServiceImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://test.com/", "HelloWebServiceImplService");
    public final static QName HelloWebServiceImplPort = new QName("http://test.com/", "HelloWebServiceImplPort");

    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/cxfdemo/services/HelloWebService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(HelloWebServiceImplService.class.getName())
                    .log(java.util.logging.Level.INFO,
                            "Can not initialize the default wsdl from {0}", "http://localhost:8080/cxfdemo/services/HelloWebService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public HelloWebServiceImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HelloWebServiceImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HelloWebServiceImplService() {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public HelloWebServiceImplService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public HelloWebServiceImplService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public HelloWebServiceImplService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName);
    }

    /**
     * @return returns HelloWebService
     */
    @WebEndpoint(name = "HelloWebServiceImplPort")
    public HelloWebService getHelloWebServiceImplPort() {
        return super.getPort(HelloWebServiceImplPort, HelloWebService.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns HelloWebService
     */
    @WebEndpoint(name = "HelloWebServiceImplPort")
    public HelloWebService getHelloWebServiceImplPort(WebServiceFeature... features) {
        return super.getPort(HelloWebServiceImplPort, HelloWebService.class, features);
    }

}
